package Kasa;

import static Kasa.Unos.server_databaze;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import static org.eclipse.persistence.platform.database.oracle.plsql.OraclePLSQLTypes.Int;

/**
 *
 * @author Amar Musli, 2017/210017 - Fakultet za raƒçunarstvo i informatiku, Univerzitet Sinergija, Bijeljina.
 */
public class Kasa extends javax.swing.JFrame {
    
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String server_databaze = "jdbc:mysql://192.168.10.16:3306/java"; 
   static final String korisnik_databaze = "student";
   static final String sifra_databaze = "student";

    public Kasa() {
        initComponents();
        prikaziDatum();
        prikaziVrijeme();
        JFrame kasa = new JFrame();
        setLocationRelativeTo(null);
        prikazivanjePivaUTabeli();
        prikazTrenutnoPrijavljenog();
        prikazSmjeneTrenutnoPrijavljenog();
        dodajNaRacunUnosKolicine.setVisible(false);
        ponistavanjeDodavanja.setVisible(false);
        proizvodNaUnosuPrikaz_unos.setVisible(false);
        proizvodNaUnosuTekst.setVisible(false);
        kolicinaProizvodaNaUnosuTekst.setVisible(false);
        kolicinaProizvodaNaUnosu_unos.setVisible(false);
        dodajKolicinu.setVisible(false);
        ukloniKolicinu.setVisible(false);
        cijenaProizvoda.setVisible(false);
        cijenaProizvodaPrikaz.setVisible(false);
        ukupnaCijenaProizvoda.setVisible(false);
        ukupnaCijenaProizvodaPrikaz.setVisible(false);
        prikazID.setVisible(false);
        
        this.addWindowListener(new WindowAdapter() {

        @Override
         public void windowClosing(WindowEvent we)
         { 
         
        jesteLiSigurni prikazivanje = new jesteLiSigurni();
        prikazivanje.setVisible(true);    
             
         }
         });
        
    }
    
    String datumNaPdfu = null;
    String vrijemeNaPdfu = null;
    String brojRacunaPrvi = null;
    String brojRacunaDrugi = null;
    
      void prikaziDatum(){
        
        Date datum = new Date();
        SimpleDateFormat format = new SimpleDateFormat("dd. MM. yyyy.");
        datum_prikaz.setText(format.format(datum));
        
    }
   
    void prikaziVrijeme(){
        
        new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Date datum = new Date();
                SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss z");
                vrijeme_prikaz.setText(format.format(datum));
            }

        }).start();
                }
    
    void prikaziDatumNaPdfu(){
        
        Date datum = new Date();
        SimpleDateFormat format = new SimpleDateFormat("dd. MM. yyyy.");
        datumNaPdfu = format.format(datum);
        
    }
   
    void prikaziVrijemeNaPdfu(){
        
                Date datum = new Date();
                SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss z");
                vrijemeNaPdfu = format.format(datum);
                
            }
    
    void generisiBrojRacunaPrvi(){
        
                Date datum = new Date();
                SimpleDateFormat format = new SimpleDateFormat("mmss");
                brojRacunaPrvi = format.format(datum);
                
            }
    
     void generisiBrojRacunaDrugi(){
        
        Date datum = new Date();
        SimpleDateFormat format = new SimpleDateFormat("ddMM");
        brojRacunaDrugi = format.format(datum);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        glavniPanel = new javax.swing.JPanel();
        uposlenikPrikaz = new javax.swing.JLabel();
        smjena = new javax.swing.JLabel();
        datumIVrijeme = new javax.swing.JLabel();
        uposlenikIme_prikaz = new javax.swing.JLabel();
        uposlenikSmjena_prikaz = new javax.swing.JLabel();
        datum_prikaz = new javax.swing.JLabel();
        trenutnoNaRacunu = new javax.swing.JLabel();
        vrijeme_prikaz = new javax.swing.JLabel();
        ukupnaCijenaPrikaz = new javax.swing.JTextField();
        predracunSkrol = new javax.swing.JScrollPane();
        predracun_tabela = new javax.swing.JTable();
        logo = new javax.swing.JLabel();
        obrisiSaRacuna_dugme = new javax.swing.JButton();
        izradiRacun_dugme = new javax.swing.JButton();
        ukupnoTekst = new javax.swing.JLabel();
        kmPrikaz = new javax.swing.JLabel();
        proizvodNaLageruTekst = new javax.swing.JLabel();
        naslov = new javax.swing.JLabel();
        prikaziPiva_dugme = new javax.swing.JButton();
        prikaziVina_dugme = new javax.swing.JButton();
        prikaziZestoka_dugme = new javax.swing.JButton();
        prikaziKafe_dugme = new javax.swing.JButton();
        prikaziSokove_dugme = new javax.swing.JButton();
        tabelaSkrol = new javax.swing.JScrollPane();
        tabelaProizvoda = new javax.swing.JTable();
        osvjezavanjeTekst = new javax.swing.JLabel();
        administratorCrveniTekst = new javax.swing.JLabel();
        dodajNaRacun = new javax.swing.JButton();
        proizvodNaUnosuTekst = new javax.swing.JLabel();
        proizvodNaUnosuPrikaz_unos = new javax.swing.JLabel();
        kolicinaProizvodaNaUnosuTekst = new javax.swing.JLabel();
        kolicinaProizvodaNaUnosu_unos = new javax.swing.JTextField();
        dodajKolicinu = new javax.swing.JButton();
        ukloniKolicinu = new javax.swing.JButton();
        dodajNaRacunUnosKolicine = new javax.swing.JButton();
        ponistavanjeDodavanja = new javax.swing.JButton();
        cijenaProizvoda = new javax.swing.JLabel();
        ukupnaCijenaProizvoda = new javax.swing.JLabel();
        cijenaProizvodaPrikaz = new javax.swing.JLabel();
        ukupnaCijenaProizvodaPrikaz = new javax.swing.JLabel();
        prikazID = new javax.swing.JLabel();
        izbornik = new javax.swing.JMenuBar();
        uposlenikIzbornikDugme = new javax.swing.JMenu();
        izlogujSeIzbornik = new javax.swing.JMenuItem();
        administracijaIzbornikDugme = new javax.swing.JMenu();
        dodajProizvodUBazuIzbornik = new javax.swing.JMenuItem();
        otvoriListuRacunaIzbornik = new javax.swing.JMenuItem();
        dodajRadnikaUBazuIzbornik = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Caffe bar \"Romansa\" - Kasa");
        setBackground(new java.awt.Color(27, 88, 138));
        setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/prijava.png")).getImage());
        setName("Glavni prozor"); // NOI18N
        setResizable(false);

        glavniPanel.setBackground(new java.awt.Color(27, 88, 138));
        glavniPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(36, 120, 189), 3));
        glavniPanel.setToolTipText(null);
        glavniPanel.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        glavniPanel.setName("Caffe bar \"Romansa\" - Kasa"); // NOI18N
        glavniPanel.setPreferredSize(new java.awt.Dimension(1390, 875));
        glavniPanel.setRequestFocusEnabled(false);

        uposlenikPrikaz.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        uposlenikPrikaz.setForeground(new java.awt.Color(224, 220, 211));
        uposlenikPrikaz.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/radnik.png"))); // NOI18N
        uposlenikPrikaz.setText("Uposlenik:");
        uposlenikPrikaz.setToolTipText(null);

        smjena.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        smjena.setForeground(new java.awt.Color(224, 220, 211));
        smjena.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/smjena.png"))); // NOI18N
        smjena.setText("Smjena:");
        smjena.setToolTipText(null);

        datumIVrijeme.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        datumIVrijeme.setForeground(new java.awt.Color(224, 220, 211));
        datumIVrijeme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/datumvrijeme.png"))); // NOI18N
        datumIVrijeme.setText("Datum i vrijeme:");
        datumIVrijeme.setToolTipText(null);

        uposlenikIme_prikaz.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        uposlenikIme_prikaz.setForeground(new java.awt.Color(224, 220, 211));
        uposlenikIme_prikaz.setText("Ime uposlenika");
        uposlenikIme_prikaz.setToolTipText(null);

        uposlenikSmjena_prikaz.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        uposlenikSmjena_prikaz.setForeground(new java.awt.Color(224, 220, 211));
        uposlenikSmjena_prikaz.setText("Smjena uposlenika");
        uposlenikSmjena_prikaz.setToolTipText(null);

        datum_prikaz.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        datum_prikaz.setForeground(new java.awt.Color(224, 220, 211));
        datum_prikaz.setText("Datum");
        datum_prikaz.setToolTipText(null);

        trenutnoNaRacunu.setFont(new java.awt.Font("Segoe UI Semilight", 1, 18)); // NOI18N
        trenutnoNaRacunu.setForeground(new java.awt.Color(224, 220, 211));
        trenutnoNaRacunu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/predracun.png"))); // NOI18N
        trenutnoNaRacunu.setText("Trenutno na raƒçunu");
        trenutnoNaRacunu.setToolTipText(null);

        vrijeme_prikaz.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        vrijeme_prikaz.setForeground(new java.awt.Color(224, 220, 211));
        vrijeme_prikaz.setText("Vrijeme");
        vrijeme_prikaz.setToolTipText(null);

        ukupnaCijenaPrikaz.setEditable(false);
        ukupnaCijenaPrikaz.setBackground(new java.awt.Color(27, 68, 115));
        ukupnaCijenaPrikaz.setFont(new java.awt.Font("Segoe UI Semilight", 1, 36)); // NOI18N
        ukupnaCijenaPrikaz.setForeground(new java.awt.Color(224, 220, 211));
        ukupnaCijenaPrikaz.setText(" ");
        ukupnaCijenaPrikaz.setToolTipText(null);
        ukupnaCijenaPrikaz.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(36, 120, 189), 6, true));
        ukupnaCijenaPrikaz.setName("Ukupan iznos raƒçuna"); // NOI18N
        ukupnaCijenaPrikaz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ukupnaCijenaPrikazActionPerformed(evt);
            }
        });

        predracunSkrol.setBackground(new java.awt.Color(27, 88, 138));
        predracunSkrol.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(36, 120, 189), 3, true));
        predracunSkrol.setForeground(new java.awt.Color(224, 220, 211));
        predracunSkrol.setToolTipText(null);
        predracunSkrol.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        predracunSkrol.setName("Predracun"); // NOI18N

        predracun_tabela.setBackground(new java.awt.Color(27, 88, 138));
        predracun_tabela.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(36, 120, 189), 3, true));
        predracun_tabela.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        predracun_tabela.setForeground(new java.awt.Color(224, 220, 211));
        predracun_tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Koliƒçina", "Proizvod", "Cijena", "Cijena x kolicina", "Redni broj"
            }
        ));
        predracun_tabela.setToolTipText(null);
        predracun_tabela.setGridColor(new java.awt.Color(255, 0, 0));
        predracun_tabela.setName("Trenutno na raƒçunu"); // NOI18N
        predracun_tabela.setOpaque(false);
        predracun_tabela.setRowHeight(28);
        predracun_tabela.setSelectionBackground(new java.awt.Color(36, 120, 189));
        predracun_tabela.setSelectionForeground(new java.awt.Color(224, 220, 211));
        predracun_tabela.setShowHorizontalLines(false);
        predracun_tabela.setShowVerticalLines(false);
        predracunSkrol.setViewportView(predracun_tabela);
        predracun_tabela.getAccessibleContext().setAccessibleName("Trenutno na raƒçunu");

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/logo.png"))); // NOI18N
        logo.setToolTipText(null);
        logo.setName("Logo"); // NOI18N

        obrisiSaRacuna_dugme.setBackground(new java.awt.Color(27, 88, 138));
        obrisiSaRacuna_dugme.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        obrisiSaRacuna_dugme.setForeground(new java.awt.Color(224, 220, 211));
        obrisiSaRacuna_dugme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/obrisi.png"))); // NOI18N
        obrisiSaRacuna_dugme.setText("Obri≈°i sa raƒçuna");
        obrisiSaRacuna_dugme.setToolTipText(null);
        obrisiSaRacuna_dugme.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(224, 220, 211), 3, true));
        obrisiSaRacuna_dugme.setName("Obri≈°i sa raƒçuna"); // NOI18N
        obrisiSaRacuna_dugme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                obrisiSaRacuna_dugmeActionPerformed(evt);
            }
        });

        izradiRacun_dugme.setBackground(new java.awt.Color(27, 88, 138));
        izradiRacun_dugme.setFont(new java.awt.Font("Segoe UI Semilight", 1, 36)); // NOI18N
        izradiRacun_dugme.setForeground(new java.awt.Color(224, 220, 211));
        izradiRacun_dugme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/stampaj.png"))); // NOI18N
        izradiRacun_dugme.setText(" ≈†tampaj raƒçun");
        izradiRacun_dugme.setToolTipText(null);
        izradiRacun_dugme.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(224, 220, 211), 5, true));
        izradiRacun_dugme.setName("Izradi raƒçun"); // NOI18N
        izradiRacun_dugme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                izradiRacun_dugmeActionPerformed(evt);
            }
        });

        ukupnoTekst.setFont(new java.awt.Font("Segoe UI Semilight", 1, 24)); // NOI18N
        ukupnoTekst.setForeground(new java.awt.Color(224, 220, 211));
        ukupnoTekst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/ukupnacijena.png"))); // NOI18N
        ukupnoTekst.setText("Ukupno:");
        ukupnoTekst.setToolTipText(null);
        ukupnoTekst.setName("Ukupan iznos raƒçuna"); // NOI18N

        kmPrikaz.setFont(new java.awt.Font("Segoe UI Semilight", 1, 24)); // NOI18N
        kmPrikaz.setForeground(new java.awt.Color(224, 220, 211));
        kmPrikaz.setText("KM");
        kmPrikaz.setToolTipText(null);
        kmPrikaz.setName("Ukupan iznos raƒçuna"); // NOI18N

        proizvodNaLageruTekst.setFont(new java.awt.Font("Segoe UI Semilight", 1, 18)); // NOI18N
        proizvodNaLageruTekst.setForeground(new java.awt.Color(224, 220, 211));
        proizvodNaLageruTekst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/skladiste.png"))); // NOI18N
        proizvodNaLageruTekst.setText("Proizvodi na lageru");
        proizvodNaLageruTekst.setToolTipText(null);
        proizvodNaLageruTekst.setName("Proizvodi na lageru"); // NOI18N

        naslov.setFont(new java.awt.Font("Segoe UI Semilight", 1, 24)); // NOI18N
        naslov.setForeground(new java.awt.Color(224, 220, 211));
        naslov.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/kasa.png"))); // NOI18N
        naslov.setText("Caffe bar \"Romansa\" - Kasa");
        naslov.setToolTipText(null);

        prikaziPiva_dugme.setBackground(new java.awt.Color(27, 88, 138));
        prikaziPiva_dugme.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        prikaziPiva_dugme.setForeground(new java.awt.Color(224, 220, 211));
        prikaziPiva_dugme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/pivo.png"))); // NOI18N
        prikaziPiva_dugme.setText("Piva");
        prikaziPiva_dugme.setToolTipText(null);
        prikaziPiva_dugme.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(224, 220, 211), 3, true));
        prikaziPiva_dugme.setName("Oƒçisti polja"); // NOI18N
        prikaziPiva_dugme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prikaziPiva_dugmeActionPerformed(evt);
            }
        });

        prikaziVina_dugme.setBackground(new java.awt.Color(27, 88, 138));
        prikaziVina_dugme.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        prikaziVina_dugme.setForeground(new java.awt.Color(224, 220, 211));
        prikaziVina_dugme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/vino.png"))); // NOI18N
        prikaziVina_dugme.setText("Vina");
        prikaziVina_dugme.setToolTipText(null);
        prikaziVina_dugme.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(224, 220, 211), 3, true));
        prikaziVina_dugme.setName("Oƒçisti polja"); // NOI18N
        prikaziVina_dugme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prikaziVina_dugmeActionPerformed(evt);
            }
        });

        prikaziZestoka_dugme.setBackground(new java.awt.Color(27, 88, 138));
        prikaziZestoka_dugme.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        prikaziZestoka_dugme.setForeground(new java.awt.Color(224, 220, 211));
        prikaziZestoka_dugme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/zestoko.png"))); // NOI18N
        prikaziZestoka_dugme.setText("≈Ωestoka");
        prikaziZestoka_dugme.setToolTipText(null);
        prikaziZestoka_dugme.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(224, 220, 211), 3, true));
        prikaziZestoka_dugme.setName("Oƒçisti polja"); // NOI18N
        prikaziZestoka_dugme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prikaziZestoka_dugmeActionPerformed(evt);
            }
        });

        prikaziKafe_dugme.setBackground(new java.awt.Color(27, 88, 138));
        prikaziKafe_dugme.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        prikaziKafe_dugme.setForeground(new java.awt.Color(224, 220, 211));
        prikaziKafe_dugme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/kafa.png"))); // NOI18N
        prikaziKafe_dugme.setText("Kafe");
        prikaziKafe_dugme.setToolTipText(null);
        prikaziKafe_dugme.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(224, 220, 211), 3, true));
        prikaziKafe_dugme.setName("Oƒçisti polja"); // NOI18N
        prikaziKafe_dugme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prikaziKafe_dugmeActionPerformed(evt);
            }
        });

        prikaziSokove_dugme.setBackground(new java.awt.Color(27, 88, 138));
        prikaziSokove_dugme.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        prikaziSokove_dugme.setForeground(new java.awt.Color(224, 220, 211));
        prikaziSokove_dugme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/sok.png"))); // NOI18N
        prikaziSokove_dugme.setText("Sokovi");
        prikaziSokove_dugme.setToolTipText(null);
        prikaziSokove_dugme.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(224, 220, 211), 3, true));
        prikaziSokove_dugme.setName("Oƒçisti polja"); // NOI18N
        prikaziSokove_dugme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prikaziSokove_dugmeActionPerformed(evt);
            }
        });

        tabelaSkrol.setBackground(new java.awt.Color(27, 88, 138));
        tabelaSkrol.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(36, 120, 189), 3, true));
        tabelaSkrol.setForeground(new java.awt.Color(224, 220, 211));
        tabelaSkrol.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N

        tabelaProizvoda.setBackground(new java.awt.Color(27, 88, 138));
        tabelaProizvoda.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(36, 120, 189), 3, true));
        tabelaProizvoda.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        tabelaProizvoda.setForeground(new java.awt.Color(224, 220, 211));
        tabelaProizvoda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Na stanju", "Proizvod", "Cijena", "Redni broj"
            }
        ));
        tabelaProizvoda.setRowHeight(28);
        tabelaSkrol.setViewportView(tabelaProizvoda);

        osvjezavanjeTekst.setFont(new java.awt.Font("Segoe UI Semilight", 1, 12)); // NOI18N
        osvjezavanjeTekst.setForeground(new java.awt.Color(224, 220, 211));
        osvjezavanjeTekst.setText("Da osvje≈æite listu proizvoda dovoljno je da ponovo kliknete na ≈æeljenu kategoriju proizvoda.");
        osvjezavanjeTekst.setToolTipText(null);

        administratorCrveniTekst.setBackground(new java.awt.Color(255, 51, 51));
        administratorCrveniTekst.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        administratorCrveniTekst.setForeground(new java.awt.Color(255, 0, 0));
        administratorCrveniTekst.setText(" ");
        administratorCrveniTekst.setToolTipText(null);

        dodajNaRacun.setBackground(new java.awt.Color(27, 88, 138));
        dodajNaRacun.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        dodajNaRacun.setForeground(new java.awt.Color(224, 220, 211));
        dodajNaRacun.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/dodaj.png"))); // NOI18N
        dodajNaRacun.setText("Dodaj na raƒçun");
        dodajNaRacun.setToolTipText(null);
        dodajNaRacun.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(224, 220, 211), 3, true));
        dodajNaRacun.setName("Obri≈°i sa raƒçuna"); // NOI18N
        dodajNaRacun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajNaRacunActionPerformed(evt);
            }
        });

        proizvodNaUnosuTekst.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        proizvodNaUnosuTekst.setForeground(new java.awt.Color(224, 220, 211));
        proizvodNaUnosuTekst.setText("Proizvod:");
        proizvodNaUnosuTekst.setToolTipText(null);

        proizvodNaUnosuPrikaz_unos.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        proizvodNaUnosuPrikaz_unos.setForeground(new java.awt.Color(224, 220, 211));
        proizvodNaUnosuPrikaz_unos.setText("Ime proizvoda");
        proizvodNaUnosuPrikaz_unos.setToolTipText(null);

        kolicinaProizvodaNaUnosuTekst.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        kolicinaProizvodaNaUnosuTekst.setForeground(new java.awt.Color(224, 220, 211));
        kolicinaProizvodaNaUnosuTekst.setText("Koliƒçina:");
        kolicinaProizvodaNaUnosuTekst.setToolTipText(null);

        kolicinaProizvodaNaUnosu_unos.setEditable(false);
        kolicinaProizvodaNaUnosu_unos.setBackground(new java.awt.Color(27, 68, 115));
        kolicinaProizvodaNaUnosu_unos.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        kolicinaProizvodaNaUnosu_unos.setForeground(new java.awt.Color(224, 220, 211));
        kolicinaProizvodaNaUnosu_unos.setText(" ");
        kolicinaProizvodaNaUnosu_unos.setToolTipText(null);
        kolicinaProizvodaNaUnosu_unos.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(36, 120, 189), 3, true));
        kolicinaProizvodaNaUnosu_unos.setName("Ukupan iznos raƒçuna"); // NOI18N
        kolicinaProizvodaNaUnosu_unos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kolicinaProizvodaNaUnosu_unosActionPerformed(evt);
            }
        });

        dodajKolicinu.setBackground(new java.awt.Color(27, 88, 138));
        dodajKolicinu.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        dodajKolicinu.setForeground(new java.awt.Color(224, 220, 211));
        dodajKolicinu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/dodaj.png"))); // NOI18N
        dodajKolicinu.setToolTipText(null);
        dodajKolicinu.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(224, 220, 211), 3, true));
        dodajKolicinu.setBorderPainted(false);
        dodajKolicinu.setContentAreaFilled(false);
        dodajKolicinu.setName("Obri≈°i sa raƒçuna"); // NOI18N
        dodajKolicinu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajKolicinuActionPerformed(evt);
            }
        });

        ukloniKolicinu.setBackground(new java.awt.Color(27, 88, 138));
        ukloniKolicinu.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        ukloniKolicinu.setForeground(new java.awt.Color(224, 220, 211));
        ukloniKolicinu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/minus.png"))); // NOI18N
        ukloniKolicinu.setToolTipText(null);
        ukloniKolicinu.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(224, 220, 211), 3, true));
        ukloniKolicinu.setBorderPainted(false);
        ukloniKolicinu.setContentAreaFilled(false);
        ukloniKolicinu.setName("Obri≈°i sa raƒçuna"); // NOI18N
        ukloniKolicinu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ukloniKolicinuActionPerformed(evt);
            }
        });

        dodajNaRacunUnosKolicine.setBackground(new java.awt.Color(27, 88, 138));
        dodajNaRacunUnosKolicine.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        dodajNaRacunUnosKolicine.setForeground(new java.awt.Color(224, 220, 211));
        dodajNaRacunUnosKolicine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/dodaj.png"))); // NOI18N
        dodajNaRacunUnosKolicine.setText("Dodaj na raƒçun");
        dodajNaRacunUnosKolicine.setToolTipText(null);
        dodajNaRacunUnosKolicine.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(224, 220, 211), 3, true));
        dodajNaRacunUnosKolicine.setName("Obri≈°i sa raƒçuna"); // NOI18N
        dodajNaRacunUnosKolicine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajNaRacunUnosKolicineActionPerformed(evt);
            }
        });

        ponistavanjeDodavanja.setBackground(new java.awt.Color(27, 88, 138));
        ponistavanjeDodavanja.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        ponistavanjeDodavanja.setForeground(new java.awt.Color(224, 220, 211));
        ponistavanjeDodavanja.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/obrisi.png"))); // NOI18N
        ponistavanjeDodavanja.setText("Poni≈°ti dodavanje");
        ponistavanjeDodavanja.setToolTipText(null);
        ponistavanjeDodavanja.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(224, 220, 211), 3, true));
        ponistavanjeDodavanja.setName("Obri≈°i sa raƒçuna"); // NOI18N
        ponistavanjeDodavanja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ponistavanjeDodavanjaActionPerformed(evt);
            }
        });

        cijenaProizvoda.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        cijenaProizvoda.setForeground(new java.awt.Color(224, 220, 211));
        cijenaProizvoda.setText("Cijena:");
        cijenaProizvoda.setToolTipText(null);

        ukupnaCijenaProizvoda.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        ukupnaCijenaProizvoda.setForeground(new java.awt.Color(224, 220, 211));
        ukupnaCijenaProizvoda.setText("Ukupno:");
        ukupnaCijenaProizvoda.setToolTipText(null);

        cijenaProizvodaPrikaz.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        cijenaProizvodaPrikaz.setForeground(new java.awt.Color(224, 220, 211));
        cijenaProizvodaPrikaz.setText("prikaz cijene");
        cijenaProizvodaPrikaz.setToolTipText(null);

        ukupnaCijenaProizvodaPrikaz.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        ukupnaCijenaProizvodaPrikaz.setForeground(new java.awt.Color(224, 220, 211));
        ukupnaCijenaProizvodaPrikaz.setText("prikaz cijene");
        ukupnaCijenaProizvodaPrikaz.setToolTipText(null);

        prikazID.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        prikazID.setForeground(new java.awt.Color(224, 220, 211));
        prikazID.setText("ID");
        prikazID.setToolTipText(null);

        javax.swing.GroupLayout glavniPanelLayout = new javax.swing.GroupLayout(glavniPanel);
        glavniPanel.setLayout(glavniPanelLayout);
        glavniPanelLayout.setHorizontalGroup(
            glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(glavniPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(glavniPanelLayout.createSequentialGroup()
                        .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(glavniPanelLayout.createSequentialGroup()
                                .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(naslov)
                                    .addGroup(glavniPanelLayout.createSequentialGroup()
                                        .addComponent(uposlenikPrikaz)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(uposlenikIme_prikaz)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(administratorCrveniTekst)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 460, Short.MAX_VALUE)
                                .addComponent(logo))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, glavniPanelLayout.createSequentialGroup()
                                .addComponent(smjena)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(uposlenikSmjena_prikaz)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(102, 102, 102))
                    .addGroup(glavniPanelLayout.createSequentialGroup()
                        .addComponent(datumIVrijeme)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(datum_prikaz)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vrijeme_prikaz)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, glavniPanelLayout.createSequentialGroup()
                        .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(proizvodNaLageruTekst)
                            .addGroup(glavniPanelLayout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(glavniPanelLayout.createSequentialGroup()
                                        .addComponent(prikaziPiva_dugme, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(prikaziVina_dugme, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(prikaziZestoka_dugme, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(prikaziSokove_dugme, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(prikaziKafe_dugme, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(tabelaSkrol, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(osvjezavanjeTekst)
                                    .addGroup(glavniPanelLayout.createSequentialGroup()
                                        .addComponent(dodajNaRacun, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(obrisiSaRacuna_dugme, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(glavniPanelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(dodajNaRacunUnosKolicine, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(ponistavanjeDodavanja, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(glavniPanelLayout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(proizvodNaUnosuTekst)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(prikazID)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(proizvodNaUnosuPrikaz_unos)
                                        .addGap(23, 23, 23)
                                        .addComponent(kolicinaProizvodaNaUnosuTekst)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(kolicinaProizvodaNaUnosu_unos, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dodajKolicinu)
                                        .addGap(4, 4, 4)
                                        .addComponent(ukloniKolicinu)
                                        .addGap(18, 18, 18)
                                        .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(glavniPanelLayout.createSequentialGroup()
                                                .addComponent(cijenaProizvoda)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cijenaProizvodaPrikaz))
                                            .addGroup(glavniPanelLayout.createSequentialGroup()
                                                .addComponent(ukupnaCijenaProizvoda)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ukupnaCijenaProizvodaPrikaz)))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, glavniPanelLayout.createSequentialGroup()
                                .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(trenutnoNaRacunu)
                                    .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(izradiRacun_dugme, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(glavniPanelLayout.createSequentialGroup()
                                            .addComponent(ukupnoTekst)
                                            .addGap(18, 18, 18)
                                            .addComponent(ukupnaCijenaPrikaz, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(kmPrikaz))))
                                .addGap(102, 102, 102))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, glavniPanelLayout.createSequentialGroup()
                                .addComponent(predracunSkrol, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
        );
        glavniPanelLayout.setVerticalGroup(
            glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(glavniPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logo)
                    .addGroup(glavniPanelLayout.createSequentialGroup()
                        .addComponent(naslov)
                        .addGap(18, 18, 18)
                        .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(uposlenikPrikaz)
                            .addComponent(uposlenikIme_prikaz)
                            .addComponent(administratorCrveniTekst))
                        .addGap(18, 18, 18)
                        .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(smjena)
                            .addComponent(uposlenikSmjena_prikaz))))
                .addGap(18, 18, 18)
                .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datumIVrijeme)
                    .addComponent(vrijeme_prikaz)
                    .addComponent(datum_prikaz))
                .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(glavniPanelLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(trenutnoNaRacunu))
                    .addGroup(glavniPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(proizvodNaLageruTekst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(osvjezavanjeTekst)))
                .addGap(18, 18, 18)
                .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(glavniPanelLayout.createSequentialGroup()
                        .addComponent(predracunSkrol, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(glavniPanelLayout.createSequentialGroup()
                        .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prikaziPiva_dugme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(prikaziVina_dugme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(prikaziZestoka_dugme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(prikaziSokove_dugme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(prikaziKafe_dugme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tabelaSkrol, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(glavniPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dodajKolicinu)
                            .addComponent(ukloniKolicinu)
                            .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(proizvodNaUnosuTekst)
                                .addComponent(proizvodNaUnosuPrikaz_unos)
                                .addComponent(kolicinaProizvodaNaUnosuTekst)
                                .addComponent(kolicinaProizvodaNaUnosu_unos, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(prikazID))
                            .addGroup(glavniPanelLayout.createSequentialGroup()
                                .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cijenaProizvoda)
                                    .addComponent(cijenaProizvodaPrikaz))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ukupnaCijenaProizvoda)
                                    .addComponent(ukupnaCijenaProizvodaPrikaz))))
                        .addGap(18, 18, 18)
                        .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dodajNaRacunUnosKolicine, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                            .addComponent(ponistavanjeDodavanja, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dodajNaRacun, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(obrisiSaRacuna_dugme, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(glavniPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(glavniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ukupnaCijenaPrikaz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(kmPrikaz)
                            .addComponent(ukupnoTekst))
                        .addGap(18, 18, 18)
                        .addComponent(izradiRacun_dugme, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        ukupnaCijenaPrikaz.getAccessibleContext().setAccessibleName("Ukupan iznos raƒçuna");
        predracunSkrol.getAccessibleContext().setAccessibleName("Predracun");
        logo.getAccessibleContext().setAccessibleName("Logo");
        ukupnoTekst.getAccessibleContext().setAccessibleName("Ukupan iznos raƒçuna");
        naslov.getAccessibleContext().setAccessibleDescription("Caffe bar \"Romansa\" - Kasa");

        izbornik.setBackground(new java.awt.Color(102, 255, 102));
        izbornik.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(27, 117, 160), 1, true));
        izbornik.setToolTipText(null);
        izbornik.setBorderPainted(false);
        izbornik.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        izbornik.setName("Izbornik"); // NOI18N

        uposlenikIzbornikDugme.setBackground(new java.awt.Color(27, 88, 138));
        uposlenikIzbornikDugme.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(27, 117, 160), 3, true));
        uposlenikIzbornikDugme.setForeground(new java.awt.Color(153, 153, 0));
        uposlenikIzbornikDugme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/radnikzuta.png"))); // NOI18N
        uposlenikIzbornikDugme.setText("Uposlenik");
        uposlenikIzbornikDugme.setToolTipText(null);
        uposlenikIzbornikDugme.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N

        izlogujSeIzbornik.setFont(new java.awt.Font("Segoe UI Semilight", 1, 12)); // NOI18N
        izlogujSeIzbornik.setForeground(new java.awt.Color(153, 153, 0));
        izlogujSeIzbornik.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/izlogujsezuta.png"))); // NOI18N
        izlogujSeIzbornik.setText("Odjavi se");
        izlogujSeIzbornik.setToolTipText(null);
        izlogujSeIzbornik.setActionCommand("odjaviSe");
        izlogujSeIzbornik.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(27, 117, 160), 3, true));
        izlogujSeIzbornik.setName("Odjavi se"); // NOI18N
        izlogujSeIzbornik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                izlogujSeIzbornikActionPerformed(evt);
            }
        });
        uposlenikIzbornikDugme.add(izlogujSeIzbornik);
        izlogujSeIzbornik.getAccessibleContext().setAccessibleDescription("Odjavi se");

        izbornik.add(uposlenikIzbornikDugme);
        uposlenikIzbornikDugme.getAccessibleContext().setAccessibleDescription("Uposlenik");

        administracijaIzbornikDugme.setBackground(new java.awt.Color(27, 88, 138));
        administracijaIzbornikDugme.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(27, 117, 160), 3, true));
        administracijaIzbornikDugme.setForeground(new java.awt.Color(153, 153, 0));
        administracijaIzbornikDugme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/podesavanja.png"))); // NOI18N
        administracijaIzbornikDugme.setText("Administracija");
        administracijaIzbornikDugme.setToolTipText(null);
        administracijaIzbornikDugme.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N

        dodajProizvodUBazuIzbornik.setFont(new java.awt.Font("Segoe UI Semilight", 1, 12)); // NOI18N
        dodajProizvodUBazuIzbornik.setForeground(new java.awt.Color(153, 153, 0));
        dodajProizvodUBazuIzbornik.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/listaproizvoda.png"))); // NOI18N
        dodajProizvodUBazuIzbornik.setText("Dodaj ili obri≈°i proizvod iz baze");
        dodajProizvodUBazuIzbornik.setToolTipText(null);
        dodajProizvodUBazuIzbornik.setActionCommand("odjaviSe");
        dodajProizvodUBazuIzbornik.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(27, 117, 160), 3, true));
        dodajProizvodUBazuIzbornik.setName("Dodaj ili obri≈°i proizvod iz baze"); // NOI18N
        dodajProizvodUBazuIzbornik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajProizvodUBazuIzbornikActionPerformed(evt);
            }
        });
        administracijaIzbornikDugme.add(dodajProizvodUBazuIzbornik);
        dodajProizvodUBazuIzbornik.getAccessibleContext().setAccessibleDescription("Dodaj ili obri≈°i proizvod iz baze");

        otvoriListuRacunaIzbornik.setFont(new java.awt.Font("Segoe UI Semilight", 1, 12)); // NOI18N
        otvoriListuRacunaIzbornik.setForeground(new java.awt.Color(153, 153, 0));
        otvoriListuRacunaIzbornik.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/listaracuna.png"))); // NOI18N
        otvoriListuRacunaIzbornik.setText("Otvori listu raƒçuna");
        otvoriListuRacunaIzbornik.setToolTipText(null);
        otvoriListuRacunaIzbornik.setActionCommand("odjaviSe");
        otvoriListuRacunaIzbornik.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(27, 117, 160), 3, true));
        otvoriListuRacunaIzbornik.setName("Otvori listu raƒçuna"); // NOI18N
        otvoriListuRacunaIzbornik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otvoriListuRacunaIzbornikActionPerformed(evt);
            }
        });
        administracijaIzbornikDugme.add(otvoriListuRacunaIzbornik);
        otvoriListuRacunaIzbornik.getAccessibleContext().setAccessibleDescription("Otvori listu raƒçuna");

        dodajRadnikaUBazuIzbornik.setFont(new java.awt.Font("Segoe UI Semilight", 1, 12)); // NOI18N
        dodajRadnikaUBazuIzbornik.setForeground(new java.awt.Color(153, 153, 0));
        dodajRadnikaUBazuIzbornik.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Kasa/slike/listaradnika.png"))); // NOI18N
        dodajRadnikaUBazuIzbornik.setText("Dodaj ili obri≈°i radnika");
        dodajRadnikaUBazuIzbornik.setToolTipText(null);
        dodajRadnikaUBazuIzbornik.setActionCommand("odjaviSe");
        dodajRadnikaUBazuIzbornik.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(27, 117, 160), 3, true));
        dodajRadnikaUBazuIzbornik.setName("Dodaj ili obri≈°i radnika"); // NOI18N
        dodajRadnikaUBazuIzbornik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajRadnikaUBazuIzbornikActionPerformed(evt);
            }
        });
        administracijaIzbornikDugme.add(dodajRadnikaUBazuIzbornik);
        dodajRadnikaUBazuIzbornik.getAccessibleContext().setAccessibleDescription("Dodaj ili obri≈°i radnika");

        izbornik.add(administracijaIzbornikDugme);
        administracijaIzbornikDugme.getAccessibleContext().setAccessibleDescription("Administracija");

        setJMenuBar(izbornik);
        izbornik.getAccessibleContext().setAccessibleName("Izbornik");
        izbornik.getAccessibleContext().setAccessibleDescription("Izbornik");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(glavniPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1140, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(glavniPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
        );

        glavniPanel.getAccessibleContext().setAccessibleName("Caffe bar \"Romansa\" - Kasa");

        getAccessibleContext().setAccessibleDescription("Caffe bar \"Romansa\" - Kasa");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void provjeraAdministatoraNaUnosuProizvoda() {
        
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            stejtment = konekcija.createStatement();
            ResultSet rezultat = stejtment.executeQuery("SELECT * FROM uposlenici WHERE daLiJeAdministrator='Da' AND daLiJeLogovan='Da'");
            
            if(rezultat.next()){
                
                 Unos iskace = new Unos();
                 iskace.setVisible(true);
                
            }else{
                
             nisiAdministratorProzor iskace = new nisiAdministratorProzor();
             iskace.setVisible(true);
            }
            }
        catch(Exception e){
             
        }

    }
    
    public void provjeraAdministatoraNaUnosuRadnika() {
        
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            stejtment = konekcija.createStatement();
            ResultSet rezultat = stejtment.executeQuery("SELECT * FROM uposlenici WHERE daLiJeAdministrator='Da' AND daLiJeLogovan='Da'");
            
            if(rezultat.next()){
                
                 unosRadnika iskace = new unosRadnika();
                 iskace.setVisible(true);
                
            }else{
                 nisiAdministratorProzor iskace = new nisiAdministratorProzor();
             iskace.setVisible(true);
            }
            }
        catch(Exception e){
            
        }

    }
    
    public void provjeraAdministatoraNaPregleduRacuna() {
        
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            stejtment = konekcija.createStatement();
            ResultSet rezultat = stejtment.executeQuery("SELECT * FROM uposlenici WHERE daLiJeAdministrator='Da' AND daLiJeLogovan='Da'");
            
            if(rezultat.next()){
                
                 prikazRacuna iskace = new prikazRacuna();
                 iskace.setVisible(true);
                
            }else{
                
             nisiAdministratorProzor iskace = new nisiAdministratorProzor();
             iskace.setVisible(true);
            }
          }
        catch(Exception e){
            
        }

    }
    
    String radnik = null;
    String smjenaRadnik = null;
  
    public void prikazTrenutnoPrijavljenogNaPdfu() {
        
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            stejtment = konekcija.createStatement();
            ResultSet rezultat = stejtment.executeQuery("SELECT * FROM uposlenici WHERE daLiJeLogovan='Da'");
            
            while(rezultat.next()){
                radnik = rezultat.getString("uposlenik");
            }
            }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
      
    }
    
     public void prikazSmjeneTrenutnoPrijavljenogNaPdfu() {
        
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            stejtment = konekcija.createStatement();
            ResultSet rezultat = stejtment.executeQuery("SELECT * FROM uposlenici WHERE smjena='Prva' OR smjena='Druga'");
            
            while(rezultat.next()){
               
                smjenaRadnik = rezultat.getString("smjena");
            }
            }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
      
    }
     
    int idUposlenika = 0;
   
    public void prikazTrenutnoPrijavljenog() {
        
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            stejtment = konekcija.createStatement();
            ResultSet rezultat = stejtment.executeQuery("SELECT * FROM uposlenici WHERE daLiJeLogovan='Da'");
            
            while(rezultat.next()){
                idUposlenika = rezultat.getInt("id");
                uposlenikIme_prikaz.setText(rezultat.getString("uposlenik"));
            }
            }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        try{

            Class.forName("com.mysql.jdbc.Driver");
            
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            stejtment = konekcija.createStatement();
            ResultSet rezultat = stejtment.executeQuery("SELECT * FROM uposlenici WHERE daLiJeLogovan='Da' and daLiJeAdministrator='Da'");
            
            while(rezultat.next()){
                administratorCrveniTekst.setText("(Administrator kase)");
            }
            }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
            
    }
    
     public void prikazSmjeneTrenutnoPrijavljenog() {
        
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            stejtment = konekcija.createStatement();
            ResultSet rezultat = stejtment.executeQuery("SELECT * FROM uposlenici WHERE smjena='Prva' OR smjena='Druga'");
            
            while(rezultat.next()){
                uposlenikSmjena_prikaz.setText(rezultat.getString("smjena"));
            }
            }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
      
    }
     
      public ArrayList<Proizvodi> prikazListePivo() {
        
    ArrayList<Proizvodi> prikazListePiva = new ArrayList<>();
    
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            String prikazivanjeIzBaze = "SELECT * FROM proizvodi WHERE kategorija='Piva'";
            stejtment = konekcija.createStatement();
            ResultSet rezultat = stejtment.executeQuery(prikazivanjeIzBaze);
            Proizvodi PivoPrikaz;
            while(rezultat.next()){
                PivoPrikaz = new Proizvodi(rezultat.getInt("id"),rezultat.getInt("naStanju"),rezultat.getString("proizvod"),rezultat.getFloat("cijena"),rezultat.getString("kategorija"));
                prikazListePiva.add(PivoPrikaz);
            }
            }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
      
     return prikazListePiva;   
    }
      
    public void prikazivanjePivaUTabeli(){
        
        ArrayList<Proizvodi> lista = prikazListePivo();
        DefaultTableModel ispisUTabeli = (DefaultTableModel)tabelaProizvoda.getModel();
        Object[] red = new Object[6];
        for(int i=0;i<lista.size(); i++){
            
            red[0] = lista.get(i).getNaStanju();
            red[1] = lista.get(i).getProizvod();
            red[2] = lista.get(i).getCijena();
            red[3] = lista.get(i).getId();
            ispisUTabeli.addRow(red);
            
        }
         
    }
    
     public ArrayList<Proizvodi> prikazListeVino() {
        
    ArrayList<Proizvodi> prikazListeVina = new ArrayList<>();
    
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            String prikazivanjeIzBaze = "SELECT * FROM proizvodi WHERE kategorija='Vina'";
            stejtment = konekcija.createStatement();
            ResultSet rezultat = stejtment.executeQuery(prikazivanjeIzBaze);
            Proizvodi vinoDodavanje;
            while(rezultat.next()){
                vinoDodavanje = new Proizvodi(rezultat.getInt("id"),rezultat.getInt("naStanju"),rezultat.getString("proizvod"),rezultat.getFloat("cijena"),rezultat.getString("kategorija"));
                prikazListeVina.add(vinoDodavanje);
            }
            }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
      
     return prikazListeVina;   
    }
    
    public void prikazivanjeVinaUTabeli(){
        
        ArrayList<Proizvodi> lista = prikazListeVino();
        DefaultTableModel ispisUTabeli = (DefaultTableModel)tabelaProizvoda.getModel();
        Object[] red = new Object[6];
        for(int i=0;i<lista.size(); i++){
            
            red[0] = lista.get(i).getNaStanju();
            red[1] = lista.get(i).getProizvod();
            red[2] = lista.get(i).getCijena();
            red[3] = lista.get(i).getId();
            ispisUTabeli.addRow(red);
            
        }
        
    }
   
    public ArrayList<Proizvodi> prikazListeZestoko() {
        
    ArrayList<Proizvodi> prikazListeZestokih = new ArrayList<>();
    
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            String prikazivanjeIzBaze = "SELECT * FROM proizvodi WHERE kategorija='Zestoka'";
            stejtment = konekcija.createStatement();
            ResultSet rezultat = stejtment.executeQuery(prikazivanjeIzBaze);
            Proizvodi zestokoDodavanje;
            while(rezultat.next()){
                zestokoDodavanje = new Proizvodi(rezultat.getInt("id"),rezultat.getInt("naStanju"),rezultat.getString("proizvod"),rezultat.getFloat("cijena"),rezultat.getString("kategorija"));
                prikazListeZestokih.add(zestokoDodavanje);
            }
            }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
      
     return prikazListeZestokih;   
    }
    
    public void prikazivanjeZestokogUTabeli(){
        
        ArrayList<Proizvodi> lista = prikazListeZestoko();
        DefaultTableModel ispisUTabeli = (DefaultTableModel)tabelaProizvoda.getModel();
        Object[] red = new Object[6];
        for(int i=0;i<lista.size(); i++){
            
            red[0] = lista.get(i).getNaStanju();
            red[1] = lista.get(i).getProizvod();
            red[2] = lista.get(i).getCijena();
            red[3] = lista.get(i).getId();
            ispisUTabeli.addRow(red);
            
        }
        
    }
    
     public ArrayList<Proizvodi> prikazListeSok() {
        
    ArrayList<Proizvodi> prikazListeSokova = new ArrayList<>();
    
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            String prikazivanjeIzBaze = "SELECT * FROM proizvodi WHERE kategorija='Sokovi'";
            stejtment = konekcija.createStatement();
            ResultSet rezultat = stejtment.executeQuery(prikazivanjeIzBaze);
            Proizvodi sokoviDodavanje;
            while(rezultat.next()){
                sokoviDodavanje = new Proizvodi(rezultat.getInt("id"),rezultat.getInt("naStanju"),rezultat.getString("proizvod"),rezultat.getFloat("cijena"),rezultat.getString("kategorija"));
                prikazListeSokova.add(sokoviDodavanje);
            }
            }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
      
     return prikazListeSokova;   
    }
    
    public void prikazivanjeSokovaUTabeli(){
        
        ArrayList<Proizvodi> lista = prikazListeSok();
        DefaultTableModel ispisUTabeli = (DefaultTableModel)tabelaProizvoda.getModel();
        Object[] red = new Object[6];
        for(int i=0;i<lista.size(); i++){
            
            red[0] = lista.get(i).getNaStanju();
            red[1] = lista.get(i).getProizvod();
            red[2] = lista.get(i).getCijena();
            red[3] = lista.get(i).getId();
            ispisUTabeli.addRow(red);
            
        }
        
    }
    
     public ArrayList<Proizvodi> prikazListeKafe() {
        
    ArrayList<Proizvodi> prikazListeKafa = new ArrayList<>();
    
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            String prikazivanjeIzBaze = "SELECT * FROM proizvodi WHERE kategorija='Kafe'";
            stejtment = konekcija.createStatement();
            ResultSet rezultat = stejtment.executeQuery(prikazivanjeIzBaze);
            Proizvodi kafeDodavanje;
            while(rezultat.next()){
                kafeDodavanje = new Proizvodi(rezultat.getInt("id"),rezultat.getInt("naStanju"),rezultat.getString("proizvod"),rezultat.getFloat("cijena"),rezultat.getString("kategorija"));
                prikazListeKafa.add(kafeDodavanje);
            }
            }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
      
     return prikazListeKafa;   
    }
    
    public void prikazivanjeKafaUTabeli(){
        
        ArrayList<Proizvodi> lista = prikazListeKafe();
        DefaultTableModel ispisUTabeli = (DefaultTableModel)tabelaProizvoda.getModel();
        Object[] red = new Object[6];
        for(int i=0;i<lista.size(); i++){
            
            red[0] = lista.get(i).getNaStanju();
            red[1] = lista.get(i).getProizvod();
            red[2] = lista.get(i).getCijena();
            red[3] = lista.get(i).getId();
            ispisUTabeli.addRow(red);
            
        }
        
    }
    
    public double izracunavanjeUkupnogIznosaRacuna(){
       
      int ukupanRacun = predracun_tabela.getRowCount();
      double suma = 0;
      for(int i=0; i<ukupanRacun;i++){
          suma = suma + Double.parseDouble(predracun_tabela.getValueAt(i, 3).toString());
      }
      
        return suma;
        
    }
     
    private void obrisiSaRacuna_dugmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_obrisiSaRacuna_dugmeActionPerformed
 
        DefaultTableModel model = (DefaultTableModel) this.predracun_tabela.getModel();

        if(predracun_tabela.getSelectedRowCount()== (0)){
             
             neuspjesnoBrisanjeSaRacuna iskace = new neuspjesnoBrisanjeSaRacuna();
             iskace.setVisible(true);
             
         }else{

        int[] redovi = predracun_tabela.getSelectedRows();
        for(int i=0;i<redovi.length;i++){
            
        String redniBrojproizvoda = model.getValueAt(redovi[i], 4).toString();
        int redniBroj = Integer.parseInt(redniBrojproizvoda);
        String zaDodati = model.getValueAt(redovi[i], 0).toString();
        int kolicinaZaDodati = Integer.parseInt(zaDodati);
        int trenutnaKolicina = 0;
            
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            stejtment = konekcija.createStatement();
            ResultSet rezultat = stejtment.executeQuery("SELECT * FROM proizvodi WHERE id="+redniBroj);
            
            while(rezultat.next()){
                trenutnaKolicina = rezultat.getInt("naStanju");
                
            }
            }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        int ukupnaKolicina = kolicinaZaDodati + trenutnaKolicina;
        String dodavanjeUkupneKolicine = String.valueOf(ukupnaKolicina);
        
        try{

        Class.forName("com.mysql.jdbc.Driver");
        System.out.println("Povezivanje sa databazom...");
        konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
        String unosUBazu = "UPDATE proizvodi SET naStanju=? where id="+redniBroj;
        PreparedStatement ubacivanjeUBazu = konekcija.prepareStatement(unosUBazu);
        ubacivanjeUBazu.setString(1, dodavanjeUkupneKolicine);
        ubacivanjeUBazu.executeUpdate();
        DefaultTableModel osvjezivanjeTabele = (DefaultTableModel)tabelaProizvoda.getModel();
        osvjezivanjeTabele.setRowCount(0);
        prikazivanjePivaUTabeli();
        
        } catch (Exception e) {
            
        }
            
             model.removeRow(redovi[i]-i);
               
        }
        ukupnaCijenaPrikaz.setText(Double.toString(izracunavanjeUkupnogIznosaRacuna())); 
        }
    }//GEN-LAST:event_obrisiSaRacuna_dugmeActionPerformed

    private void ukupnaCijenaPrikazActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ukupnaCijenaPrikazActionPerformed
       
    }//GEN-LAST:event_ukupnaCijenaPrikazActionPerformed

    private void izradiRacun_dugmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_izradiRacun_dugmeActionPerformed

         if(predracun_tabela.getRowCount() == (0)){
             
             neuspjesnoBrisanjeSvegaSaRacuna iskace = new neuspjesnoBrisanjeSvegaSaRacuna();
             iskace.setVisible(true);
             
         }else{
        
         prikazTrenutnoPrijavljenogNaPdfu();
         prikazSmjeneTrenutnoPrijavljenogNaPdfu();
         prikaziDatumNaPdfu();
         prikaziVrijemeNaPdfu();
         generisiBrojRacunaPrvi();
         generisiBrojRacunaDrugi();
     
         String racunBroj = brojRacunaPrvi+brojRacunaDrugi;  
        
       try {                                                 
           
           TableModel pravljenjePredracuna = tabelaProizvoda.getModel();
           DefaultTableModel model = (DefaultTableModel) predracun_tabela.getModel();
           Object[] redovi = new Object[3];
           redovi[0] = ("");
           redovi[1] = ("");
           model.addRow(redovi);
           
           Document racun = new Document();
           
           String ukupnaCijena = ukupnaCijenaPrikaz.getText();
           
           Paragraph prazan = new Paragraph(" ");
           Font fontNaslova = FontFactory.getFont(FontFactory.COURIER, 16, Font.BOLD);
           Font fontRacuna = FontFactory.getFont(FontFactory.COURIER, 24, Font.BOLD);
           Font fontParagrafa = FontFactory.getFont(FontFactory.COURIER, 12, Font.NORMAL);
           Font boldirano = FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD);
           Paragraph naslov = new Paragraph("CAFFE BAR ROMANSA BIJELJINA", fontNaslova);
           naslov.setAlignment(Paragraph.ALIGN_CENTER);
           Paragraph adresa = new Paragraph("BIJELJINA BB", fontParagrafa);
           adresa.setAlignment(Paragraph.ALIGN_CENTER);
           Paragraph postanskiBrojIGrad = new Paragraph("76300 BIJELJINA", fontParagrafa);
           postanskiBrojIGrad.setAlignment(Paragraph.ALIGN_CENTER);
           Paragraph racunTekst = new Paragraph("RACUN #"+racunBroj, fontRacuna);
           racunTekst.setAlignment(Paragraph.ALIGN_CENTER);
           Paragraph ukupno = new Paragraph("UKUPNO: " + ukupnaCijena + " KM", fontRacuna);
           ukupno.setAlignment(Paragraph.ALIGN_RIGHT);
           Paragraph datum = new Paragraph("Datum: " + datumNaPdfu, fontParagrafa);
           datum.setAlignment(Paragraph.ALIGN_LEFT);
           Paragraph vrijeme = new Paragraph("Vrijeme: " + vrijemeNaPdfu, fontParagrafa);
           vrijeme.setAlignment(Paragraph.ALIGN_LEFT);
           Paragraph imeRadnika = new Paragraph("Radnik na kasi: " + radnik, fontParagrafa);
           imeRadnika.setAlignment(Paragraph.ALIGN_LEFT);
           Paragraph smjenaRadnika = new Paragraph("Smjena radnika: " + smjenaRadnik, fontParagrafa);
           smjenaRadnika.setAlignment(Paragraph.ALIGN_LEFT);
           Paragraph racunGenerisanBroj = new Paragraph("Broj racuna: " + racunBroj, fontParagrafa);
           racunGenerisanBroj.setAlignment(Paragraph.ALIGN_RIGHT);
           Paragraph crtice = new Paragraph("---------------------------------------------------------------------", fontParagrafa);
           crtice.setAlignment(Paragraph.ALIGN_CENTER);
           Paragraph hvalaNa = new Paragraph("HVALA NA POSJETI,", fontParagrafa);
           hvalaNa.setAlignment(Paragraph.ALIGN_CENTER);
           Paragraph dodjite = new Paragraph("DODJITE NAM OPET! :D", fontParagrafa);
           dodjite.setAlignment(Paragraph.ALIGN_CENTER);
           
           PdfWriter.getInstance(racun, new FileOutputStream("Racun #" + racunBroj + ".pdf"));
           
           PdfPTable tabelaUPdf = new PdfPTable(predracun_tabela.getColumnCount());
             
           Paragraph kolicinaStavka = new Paragraph("Kolicina", boldirano);
           PdfPCell kolicineStavka = new PdfPCell(kolicinaStavka);
           Paragraph proizvodStavka = new Paragraph("Proizvod", boldirano);
           PdfPCell proizvodiStavka = new PdfPCell(proizvodStavka);
           Paragraph cijenaStavka = new Paragraph("Cijena po komadu", boldirano);
           PdfPCell cijeneStavka = new PdfPCell(cijenaStavka);
           Paragraph ukupnaCijenaStavka = new Paragraph("Cijena x kolicina", boldirano);
           PdfPCell ukupneCijeneStavka = new PdfPCell(ukupnaCijenaStavka);
           Paragraph prazno = new Paragraph("Redni broj", boldirano);
           PdfPCell prazna = new PdfPCell(prazno);
           kolicineStavka.setBorder(PdfPCell.NO_BORDER);
           proizvodiStavka.setBorder(PdfPCell.NO_BORDER);
           cijeneStavka.setBorder(PdfPCell.NO_BORDER);
           ukupneCijeneStavka.setBorder(PdfPCell.NO_BORDER);
           prazna.setBorder(PdfPCell.NO_BORDER);
           tabelaUPdf.addCell(kolicineStavka);
           tabelaUPdf.addCell(proizvodiStavka);
           tabelaUPdf.addCell(cijeneStavka);
           tabelaUPdf.addCell(ukupneCijeneStavka);
           tabelaUPdf.addCell(prazna);
           
           for (int redoviTabele = 0; redoviTabele < predracun_tabela.getRowCount() - 1; redoviTabele++) {
               for (int koloneTabele = 0; koloneTabele < predracun_tabela.getColumnCount(); koloneTabele++) {
                    
           Paragraph proizvodiNaRacunu = new Paragraph(predracun_tabela.getModel().getValueAt(redoviTabele, koloneTabele).toString(), fontParagrafa);
           PdfPCell celijaProizvoda = new PdfPCell(proizvodiNaRacunu);
           celijaProizvoda.setBorder(PdfPCell.NO_BORDER); 
           tabelaUPdf.addCell(celijaProizvoda);
                    
               }
           }
           
           racun.open();
           
           racun.addAuthor("Caffe bar 'Romansa' Bijeljina");
           racun.addCreationDate();
           racun.addCreator("Caffe bar 'Romansa' Bijeljina");
           racun.addHeader("Caffe bar 'Romansa' Bijeljina", "Caffe bar 'Romansa' Bijeljina");
           racun.addKeywords("racun, kafic, romansa, bijeljina");
           racun.addTitle("Caffe bar 'Romansa' Bijeljina - Racun "+racunBroj);
           racun.addSubject("Racun "+racunBroj);
           
           racun.add(crtice);
           racun.add(naslov);
           racun.add(adresa);
           racun.add(postanskiBrojIGrad);
           racun.add(prazan);
           racun.add(datum);
           racun.add(vrijeme);
           racun.add(prazan);
           racun.add(racunGenerisanBroj);
           racun.add(prazan);
           racun.add(crtice);
           racun.add(prazan);
           racun.add(racunTekst);
           racun.add(prazan);
           racun.add(crtice);
           racun.add(prazan);
           racun.add(tabelaUPdf);
           racun.add(prazan);
           racun.add(crtice);
           racun.add(prazan);
           racun.add(ukupno);
           racun.add(prazan);
           racun.add(imeRadnika);
           racun.add(smjenaRadnika);
           racun.add(prazan);
           racun.add(crtice);
           racun.add(hvalaNa);
           racun.add(dodjite);
           racun.add(crtice);
           
           racun.close();
           
            if (Desktop.isDesktopSupported()) {
                    try {
                        File otvaranjeFajla = new File("Racun #" + racunBroj + ".pdf");
                        Desktop.getDesktop().open(otvaranjeFajla);
                    } catch (IOException e) {
                        // ako ne bude moglo da se otvori
                    }
                }
           
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            System.out.println("Povezivanje sa databazom...");
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            String unosUBazu = "Insert into racuni(brojracuna, nazivfajla, datum, vrijeme, radnik, smjena)values(?,?,?,?,?,?)";
            PreparedStatement ubacivanjeUBazu = konekcija.prepareStatement(unosUBazu);
            ubacivanjeUBazu.setString(1, racunBroj);
            ubacivanjeUBazu.setString(2, "Racun #" + racunBroj + ".pdf");
            ubacivanjeUBazu.setString(3, datumNaPdfu);
            ubacivanjeUBazu.setString(4, vrijemeNaPdfu);
            ubacivanjeUBazu.setString(5, radnik);
            ubacivanjeUBazu.setString(6, smjenaRadnik);
          
            ubacivanjeUBazu.executeUpdate();
            
        } catch (Exception e) {
               
        }
            
       } catch (DocumentException ex) {
           Logger.getLogger(Kasa.class.getName()).log(Level.SEVERE, null, ex);
       } catch (FileNotFoundException ex) {
           Logger.getLogger(Kasa.class.getName()).log(Level.SEVERE, null, ex);
       }
        
      DefaultTableModel model = (DefaultTableModel) this.predracun_tabela.getModel();
         
            int brojRedova = model.getRowCount();

            for (int i = brojRedova - 1; i >= 0; i--) {
             model.removeRow(i);
            }
            
       ukupnaCijenaPrikaz.setText(Double.toString(izracunavanjeUkupnogIznosaRacuna()));
       
         }
         
    }//GEN-LAST:event_izradiRacun_dugmeActionPerformed
    
     public PdfPCell celija(String text, int alignment) {
       PdfPCell izgledCelije = new PdfPCell(new Phrase(text));
       izgledCelije.setPadding(0);
       izgledCelije.setHorizontalAlignment(alignment);
       izgledCelije.setBorder(PdfPCell.NO_BORDER);
       return izgledCelije;
    }
    
    private void prikaziPiva_dugmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prikaziPiva_dugmeActionPerformed

        DefaultTableModel osvjezivanjeTabele = (DefaultTableModel)tabelaProizvoda.getModel();
        osvjezivanjeTabele.setRowCount(0);
        prikazivanjePivaUTabeli();

    }//GEN-LAST:event_prikaziPiva_dugmeActionPerformed

    private void prikaziVina_dugmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prikaziVina_dugmeActionPerformed

        DefaultTableModel osvjezivanjeTabele = (DefaultTableModel)tabelaProizvoda.getModel();
        osvjezivanjeTabele.setRowCount(0);
        prikazivanjeVinaUTabeli();

    }//GEN-LAST:event_prikaziVina_dugmeActionPerformed

    private void prikaziZestoka_dugmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prikaziZestoka_dugmeActionPerformed

        DefaultTableModel osvjezivanjeTabele = (DefaultTableModel)tabelaProizvoda.getModel();
        osvjezivanjeTabele.setRowCount(0);
        prikazivanjeZestokogUTabeli();

    }//GEN-LAST:event_prikaziZestoka_dugmeActionPerformed

    private void prikaziKafe_dugmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prikaziKafe_dugmeActionPerformed

        DefaultTableModel osvjezivanjeTabele = (DefaultTableModel)tabelaProizvoda.getModel();
        osvjezivanjeTabele.setRowCount(0);
        prikazivanjeKafaUTabeli();

    }//GEN-LAST:event_prikaziKafe_dugmeActionPerformed

    private void prikaziSokove_dugmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prikaziSokove_dugmeActionPerformed

        DefaultTableModel osvjezivanjeTabele = (DefaultTableModel)tabelaProizvoda.getModel();
        osvjezivanjeTabele.setRowCount(0);
        prikazivanjeSokovaUTabeli();

    }//GEN-LAST:event_prikaziSokove_dugmeActionPerformed

    private void izlogujSeIzbornikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_izlogujSeIzbornikActionPerformed
        
        Connection konekcija = null;
        Statement stejtment = null;

        try{

            Class.forName("com.mysql.jdbc.Driver");
            System.out.println("Povezivanje sa databazom...");
            konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
            String unosUBazu = "UPDATE uposlenici SET smjena=?, daLiJeLogovan=? where id="+idUposlenika;
            
            PreparedStatement brisanjeIzBase = konekcija.prepareStatement(unosUBazu);
            brisanjeIzBase.setString(1, "Nije na poslu");
            brisanjeIzBase.setString(2, "Ne");
            
            brisanjeIzBase.executeUpdate();
            
            java.awt.Window prozori[] = java.awt.Window.getWindows(); 
            for(int i=0;i<prozori.length;i++){ 
            prozori[i].dispose(); 
            } 
            
            Prijava prikazivanje = new Prijava();
            prikazivanje.setVisible(true);
           
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }  

    }//GEN-LAST:event_izlogujSeIzbornikActionPerformed

    private void dodajProizvodUBazuIzbornikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajProizvodUBazuIzbornikActionPerformed
        
        provjeraAdministatoraNaUnosuProizvoda();
        
    }//GEN-LAST:event_dodajProizvodUBazuIzbornikActionPerformed

    private void otvoriListuRacunaIzbornikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otvoriListuRacunaIzbornikActionPerformed
        
       provjeraAdministatoraNaPregleduRacuna();
        
    }//GEN-LAST:event_otvoriListuRacunaIzbornikActionPerformed

    private void dodajRadnikaUBazuIzbornikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajRadnikaUBazuIzbornikActionPerformed
       
        provjeraAdministatoraNaUnosuRadnika();
        
    }//GEN-LAST:event_dodajRadnikaUBazuIzbornikActionPerformed

    int kolicina = 1;
    float cijenaProizvodaRacunanje;
    double ukupnaCijenaProizvodaRacunanje;
    double cijenaProizvodaRacunajBezFormata;
       
    private void dodajNaRacunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajNaRacunActionPerformed

        
        if(tabelaProizvoda.getSelectionModel().isSelectionEmpty()){
          
            neuspjesnoDodavanjeNaRacun iskace = new neuspjesnoDodavanjeNaRacun();
            iskace.setVisible(true);
          
      }else{
            
       TableModel pravljenjePredracuna = tabelaProizvoda.getModel();     
       int[] vrijednosti = tabelaProizvoda.getSelectedRows(); 
       DefaultTableModel azuriranjeTabeleProizvoda = (DefaultTableModel) tabelaProizvoda.getModel();
       
       for(int i=0;i<vrijednosti.length; i++){
       
       if(azuriranjeTabeleProizvoda.getValueAt(vrijednosti[i], 0).equals(0)){ 
           
           nemaNaStanju iskace = new nemaNaStanju();
           iskace.setVisible(true);
           
       }else{
           
       int naStanju = (int) azuriranjeTabeleProizvoda.getValueAt(vrijednosti[i], 0);
       naStanju = naStanju - 1;
       azuriranjeTabeleProizvoda.setValueAt(naStanju, vrijednosti[i], 0); 
       proizvodNaUnosuPrikaz_unos.setText((String) pravljenjePredracuna.getValueAt(vrijednosti[i], 1));
       prikazID.setText(pravljenjePredracuna.getValueAt(vrijednosti[i], 3).toString());
       cijenaProizvodaRacunanje = (float) azuriranjeTabeleProizvoda.getValueAt(vrijednosti[i], 2);
       cijenaProizvodaRacunajBezFormata = (double)cijenaProizvodaRacunanje;
       DecimalFormat ogranicenjeNaDvijeDecimale = new DecimalFormat("0.00");
       String cijenaProizvodaRacunaj = ogranicenjeNaDvijeDecimale.format(cijenaProizvodaRacunajBezFormata);
       cijenaProizvodaPrikaz.setText(cijenaProizvodaRacunaj + " KM");
       ukupnaCijenaProizvodaPrikaz.setText(cijenaProizvodaRacunaj);
        
        
        prikaziKafe_dugme.setVisible(false);
        prikaziVina_dugme.setVisible(false);
        prikaziZestoka_dugme.setVisible(false);
        prikaziSokove_dugme.setVisible(false);
        prikaziPiva_dugme.setVisible(false);
        osvjezavanjeTekst.setVisible(false);
        dodajNaRacun.setVisible(false);
        obrisiSaRacuna_dugme.setVisible(false);
        cijenaProizvoda.setVisible(true);
        cijenaProizvodaPrikaz.setVisible(true);
        ukupnaCijenaProizvoda.setVisible(true);
        ukupnaCijenaProizvodaPrikaz.setVisible(true);
        dodajNaRacunUnosKolicine.setVisible(true);
        ponistavanjeDodavanja.setVisible(true);
        proizvodNaUnosuPrikaz_unos.setVisible(true);
        proizvodNaUnosuTekst.setVisible(true);
        kolicinaProizvodaNaUnosuTekst.setVisible(true);
        kolicinaProizvodaNaUnosu_unos.setVisible(true);
        dodajKolicinu.setVisible(true);
        ukloniKolicinu.setVisible(false);
        prikazID.setVisible(true);
        kolicinaProizvodaNaUnosu_unos.setText(String.valueOf(kolicina));
        
        }
        }
        }
    }//GEN-LAST:event_dodajNaRacunActionPerformed

    private void kolicinaProizvodaNaUnosu_unosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kolicinaProizvodaNaUnosu_unosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kolicinaProizvodaNaUnosu_unosActionPerformed

    private void dodajKolicinuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajKolicinuActionPerformed
        
       int[] vrijednosti = tabelaProizvoda.getSelectedRows(); 
       DefaultTableModel azuriranjeTabeleProizvoda = (DefaultTableModel) tabelaProizvoda.getModel();
       
       for(int i=0;i<vrijednosti.length; i++){
       int naStanju = (int) azuriranjeTabeleProizvoda.getValueAt(vrijednosti[i], 0);
       naStanju = naStanju - 1;
       azuriranjeTabeleProizvoda.setValueAt(naStanju, vrijednosti[i], 0); 
       
       if(azuriranjeTabeleProizvoda.getValueAt(vrijednosti[i], 0).equals(0)){
           
        dodajKolicinu.setVisible(false);
           
       }
        }
        
       kolicina = kolicina + 1;
       kolicinaProizvodaNaUnosu_unos.setText(String.valueOf(kolicina));
       ukupnaCijenaProizvodaRacunanje = cijenaProizvodaRacunajBezFormata * kolicina;
       DecimalFormat ogranicenjeNaDvijeDecimale = new DecimalFormat("0.00");
       String ukupnaCijenaProizvodaRacunaj = ogranicenjeNaDvijeDecimale.format(ukupnaCijenaProizvodaRacunanje);
       ukupnaCijenaProizvodaPrikaz.setText(ukupnaCijenaProizvodaRacunaj);
       
       ukloniKolicinu.setVisible(true);
       
       if(!"1".equals(kolicinaProizvodaNaUnosu_unos.getText())){
           
           ponistavanjeDodavanja.setVisible(false);
           
       }
       
    }//GEN-LAST:event_dodajKolicinuActionPerformed

    private void ukloniKolicinuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ukloniKolicinuActionPerformed
       
       int[] vrijednosti = tabelaProizvoda.getSelectedRows(); 
       DefaultTableModel azuriranjeTabeleProizvoda = (DefaultTableModel) tabelaProizvoda.getModel();
       
       for(int i=0;i<vrijednosti.length; i++){
       int naStanju = (int) azuriranjeTabeleProizvoda.getValueAt(vrijednosti[i], 0);
       naStanju = naStanju + 1;
       azuriranjeTabeleProizvoda.setValueAt(naStanju, vrijednosti[i], 0); 
       
       if(!azuriranjeTabeleProizvoda.getValueAt(vrijednosti[i], 0).equals("0")){
           
        dodajKolicinu.setVisible(true);
           
       }
       
        } 
       kolicina = kolicina - 1;
       kolicinaProizvodaNaUnosu_unos.setText(String.valueOf(kolicina));
       ukupnaCijenaProizvodaRacunanje = cijenaProizvodaRacunajBezFormata * kolicina;
       DecimalFormat ogranicenjeNaDvijeDecimale = new DecimalFormat("0.00");
       String ukupnaCijenaProizvodaRacunaj = ogranicenjeNaDvijeDecimale.format(ukupnaCijenaProizvodaRacunanje);
       ukupnaCijenaProizvodaPrikaz.setText(ukupnaCijenaProizvodaRacunaj);
       
       if(!"1".equals(kolicinaProizvodaNaUnosu_unos.getText())){
           
           ponistavanjeDodavanja.setVisible(false);
           
       }
       
       if("1".equals(kolicinaProizvodaNaUnosu_unos.getText())){
           
           ukloniKolicinu.setVisible(false);
           ponistavanjeDodavanja.setVisible(true);
           
       }
       
    }//GEN-LAST:event_ukloniKolicinuActionPerformed

    private void dodajNaRacunUnosKolicineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajNaRacunUnosKolicineActionPerformed
        
      TableModel pravljenjePredracuna = tabelaProizvoda.getModel();
      
      int[] vrijednosti = tabelaProizvoda.getSelectedRows();
      
      Object[] redovi = new Object[6];
      
      DefaultTableModel model = (DefaultTableModel) predracun_tabela.getModel();
      DefaultTableModel azuriranjeTabeleProizvoda = (DefaultTableModel) tabelaProizvoda.getModel();
      
          for(int i=0;i<vrijednosti.length; i++){
              
          int naStanju = (int) azuriranjeTabeleProizvoda.getValueAt(vrijednosti[i], 0);
               
          redovi[0] = kolicinaProizvodaNaUnosu_unos.getText();
          redovi[1] = proizvodNaUnosuPrikaz_unos.getText();
          redovi[2] = cijenaProizvodaPrikaz.getText();
          redovi[3] = ukupnaCijenaProizvodaPrikaz.getText();
          redovi[4] = prikazID.getText();
          
       Connection konekcija = null;
       Statement stejtment = null;
       
       String redniBrojproizvoda = prikazID.getText();
       int redniBroj = Integer.parseInt(redniBrojproizvoda); 

        try{

        Class.forName("com.mysql.jdbc.Driver");
        System.out.println("Povezivanje sa databazom...");
        konekcija = DriverManager.getConnection(server_databaze,korisnik_databaze,sifra_databaze);
        String unosUBazu = "UPDATE proizvodi SET naStanju=? where id="+redniBroj;
        PreparedStatement ubacivanjeUBazu = konekcija.prepareStatement(unosUBazu);
        ubacivanjeUBazu.setString(1, azuriranjeTabeleProizvoda.getValueAt(vrijednosti[i], 0).toString());
        ubacivanjeUBazu.executeUpdate();
        DefaultTableModel osvjezivanjeTabele = (DefaultTableModel)tabelaProizvoda.getModel();
        osvjezivanjeTabele.fireTableDataChanged();
        
        } catch (Exception e) {
            
        }
          
           model.addRow(redovi); 
           
      }
         
       kolicina = 1;
       kolicinaProizvodaNaUnosu_unos.setText(String.valueOf(kolicina));
      
       prikaziKafe_dugme.setVisible(true);
       prikaziVina_dugme.setVisible(true);
       prikaziZestoka_dugme.setVisible(true);
       prikaziSokove_dugme.setVisible(true);
        prikaziPiva_dugme.setVisible(true);
        osvjezavanjeTekst.setVisible(true);
        dodajNaRacun.setVisible(true);
        obrisiSaRacuna_dugme.setVisible(true);
        dodajNaRacunUnosKolicine.setVisible(false);
        ponistavanjeDodavanja.setVisible(false);
        proizvodNaUnosuPrikaz_unos.setVisible(false);
        proizvodNaUnosuTekst.setVisible(false);
        kolicinaProizvodaNaUnosuTekst.setVisible(false);
        kolicinaProizvodaNaUnosu_unos.setVisible(false);
        dodajKolicinu.setVisible(false);
        ukloniKolicinu.setVisible(false);
        cijenaProizvoda.setVisible(false);
        cijenaProizvodaPrikaz.setVisible(false);
        ukupnaCijenaProizvoda.setVisible(false);
        ukupnaCijenaProizvodaPrikaz.setVisible(false);
        prikazID.setVisible(false);
        tabelaProizvoda.getSelectionModel().clearSelection();
        
      DecimalFormat ogranicenjeNaDvijeDecimale = new DecimalFormat("0.00");
      String ukupanIznosRacuna = ogranicenjeNaDvijeDecimale.format(izracunavanjeUkupnogIznosaRacuna());
      ukupnaCijenaPrikaz.setText(ukupanIznosRacuna);
       
    }//GEN-LAST:event_dodajNaRacunUnosKolicineActionPerformed

    private void ponistavanjeDodavanjaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ponistavanjeDodavanjaActionPerformed
        
        int[] vrijednosti = tabelaProizvoda.getSelectedRows(); 
       DefaultTableModel azuriranjeTabeleProizvoda = (DefaultTableModel) tabelaProizvoda.getModel();
       
       for(int i=0;i<vrijednosti.length; i++){
       int naStanju = (int) azuriranjeTabeleProizvoda.getValueAt(vrijednosti[i], 0);
       naStanju = naStanju + 1;
       azuriranjeTabeleProizvoda.setValueAt(naStanju, vrijednosti[i], 0); 
        }
       
        prikaziKafe_dugme.setVisible(true);
        prikaziVina_dugme.setVisible(true);
        prikaziZestoka_dugme.setVisible(true);
        prikaziSokove_dugme.setVisible(true);
        prikaziPiva_dugme.setVisible(true);
        osvjezavanjeTekst.setVisible(true);
        dodajNaRacun.setVisible(true);
        obrisiSaRacuna_dugme.setVisible(true);
        dodajNaRacunUnosKolicine.setVisible(false);
        ponistavanjeDodavanja.setVisible(false);
        proizvodNaUnosuPrikaz_unos.setVisible(false);
        proizvodNaUnosuTekst.setVisible(false);
        kolicinaProizvodaNaUnosuTekst.setVisible(false);
        kolicinaProizvodaNaUnosu_unos.setVisible(false);
        dodajKolicinu.setVisible(false);
        ukloniKolicinu.setVisible(false);
        cijenaProizvoda.setVisible(false);
        cijenaProizvodaPrikaz.setVisible(false);
        ukupnaCijenaProizvoda.setVisible(false);
        ukupnaCijenaProizvodaPrikaz.setVisible(false);
        prikazID.setVisible(false);
        tabelaProizvoda.getSelectionModel().clearSelection();
        
    }//GEN-LAST:event_ponistavanjeDodavanjaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Kasa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Kasa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Kasa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Kasa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Kasa().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu administracijaIzbornikDugme;
    private javax.swing.JLabel administratorCrveniTekst;
    private javax.swing.JLabel cijenaProizvoda;
    private javax.swing.JLabel cijenaProizvodaPrikaz;
    private javax.swing.JLabel datumIVrijeme;
    private javax.swing.JLabel datum_prikaz;
    private javax.swing.JButton dodajKolicinu;
    private javax.swing.JButton dodajNaRacun;
    private javax.swing.JButton dodajNaRacunUnosKolicine;
    private javax.swing.JMenuItem dodajProizvodUBazuIzbornik;
    private javax.swing.JMenuItem dodajRadnikaUBazuIzbornik;
    private javax.swing.JPanel glavniPanel;
    private javax.swing.JMenuBar izbornik;
    private javax.swing.JMenuItem izlogujSeIzbornik;
    private javax.swing.JButton izradiRacun_dugme;
    private javax.swing.JLabel kmPrikaz;
    private javax.swing.JLabel kolicinaProizvodaNaUnosuTekst;
    private javax.swing.JTextField kolicinaProizvodaNaUnosu_unos;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel naslov;
    private javax.swing.JButton obrisiSaRacuna_dugme;
    private javax.swing.JLabel osvjezavanjeTekst;
    private javax.swing.JMenuItem otvoriListuRacunaIzbornik;
    private javax.swing.JButton ponistavanjeDodavanja;
    private javax.swing.JScrollPane predracunSkrol;
    private javax.swing.JTable predracun_tabela;
    private javax.swing.JLabel prikazID;
    private javax.swing.JButton prikaziKafe_dugme;
    private javax.swing.JButton prikaziPiva_dugme;
    private javax.swing.JButton prikaziSokove_dugme;
    private javax.swing.JButton prikaziVina_dugme;
    private javax.swing.JButton prikaziZestoka_dugme;
    private javax.swing.JLabel proizvodNaLageruTekst;
    private javax.swing.JLabel proizvodNaUnosuPrikaz_unos;
    private javax.swing.JLabel proizvodNaUnosuTekst;
    private javax.swing.JLabel smjena;
    private javax.swing.JTable tabelaProizvoda;
    private javax.swing.JScrollPane tabelaSkrol;
    private javax.swing.JLabel trenutnoNaRacunu;
    private javax.swing.JButton ukloniKolicinu;
    private javax.swing.JTextField ukupnaCijenaPrikaz;
    private javax.swing.JLabel ukupnaCijenaProizvoda;
    private javax.swing.JLabel ukupnaCijenaProizvodaPrikaz;
    private javax.swing.JLabel ukupnoTekst;
    private javax.swing.JLabel uposlenikIme_prikaz;
    private javax.swing.JMenu uposlenikIzbornikDugme;
    private javax.swing.JLabel uposlenikPrikaz;
    private javax.swing.JLabel uposlenikSmjena_prikaz;
    private javax.swing.JLabel vrijeme_prikaz;
    // End of variables declaration//GEN-END:variables

}
